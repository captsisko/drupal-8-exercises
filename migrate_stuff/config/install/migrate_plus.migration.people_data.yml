id: people_data
description: People json data ready to migrate
migration_group: people
migration_tags:
  - user
dependencies:
  enforced:
    module:
      - migrate_stuff
source:
  # We use the JSON source plugin.
  plugin: url
  # data_fetcher_plugin: http
  data_fetcher_plugin: file
  data_parser_plugin: json
  # The data_parser normally limits the fields passed on to the source plugin
  # to fields configured to be used as part of the migration. To support more
  # dynamic migrations, the JSON data parser supports including the original
  # data for the current row. Simply include the 'include_raw_data' flag set
  # to `true` to enable this. This option is disabled by default to minimize
  # memory footprint for migrations that do not need this capability.
  # include_raw_data: true
  # Normally, this is one or more fully-qualified URLs or file paths. Because
  # we can't hardcode your local URL, we provide a relative path here which
  # hook_install() will rewrite to a full URL for the current site.
  urls:
    - 'public://migrate_stuff/people1.json'
  # An xpath-like selector corresponding to the items to be imported.
  item_selector: person
  # Under 'fields', we list the data items to be imported. The first level keys
  # are the source field names we want to populate (the names to be used as
  # sources in the process configuration below). For each field we're importing,
  # we provide a label (optional - this is for display in migration tools) and
  # an xpath for retrieving that value. It's important to note that this xpath
  # is relative to the elements retrieved by item_selector.
  fields:
    -
      name: id
      label: 'Person ID'
      selector: id
    -
      name: firstname
      label: 'Firstname'
      selector: first_name
    -
      name: lastname
      label: 'Lastname'
      selector: last_name
    -
      name: email
      label: 'Email'
      selector: email
    -
      name: gender
      label: 'Gender'
      selector: gender
    -
      name: ip_address
      label: 'IP Address'
      selector: ip_address
    -
      name: latitude
      label:  'Latitude'
      selector: latidude
    -
      name: longitude
      label: 'Longitude'
      selector: longitude
    -
      name: avatar
      label: 'Avatar'
      selector: avatar
  # Under 'ids', we identify source fields populated above which will uniquely
  # identify each imported item. The 'type' makes sure the migration map table
  # uses the proper schema type for stored the IDs.
  ids:
    id:
      type: integer
migration_dependencies: {}
process:
  # Note that the source field names here (name, description and price) were
  # defined by the 'fields' configuration for the source plugin above.
  type:
    plugin: default_value
    default_value: product
  name: lastname
  mail: email
  user_picture: avatar
  # field_upc: upc
  # field_description: description
  # field_price: price
  # sticky:
  #   plugin: default_value
  #   default_value: 0
  # uid:
  #   plugin: default_value
  #   default_value: 0
destination:
  plugin: 'entity:user'